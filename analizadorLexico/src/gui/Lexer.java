package gui;

// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/logic/Lexer.flex

import compilerTools.Token;


@SuppressWarnings("fallthrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\126\u0100\1\u2600\1\u0100\1\u2700"+
    "\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00\10\u2e00"+
    "\31\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000\1\u5100"+
    "\3\u0100\1\u5200\1\u5300\1\u5400\11\u1f00\1\u5500\4\u0100\1\u5600"+
    "\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900\2\u1f00"+
    "\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00\41\u1f00"+
    "\1\u5f00\1\u0100\1\u6000\1\u6100\11\u1f00\1\u6200\22\u1f00\1\u6300"+
    "\1\u1f00\1\u6400\1\u6500\1\u1f00\1\u6600\1\u6700\1\u6800\1\u6900"+
    "\2\u1f00\1\u6a00\4\u1f00\1\u6b00\1\u6c00\1\u6d00\1\u6e00\1\u1f00"+
    "\1\u6f00\2\u1f00\1\u7000\1\u7100\1\u7200\2\u1f00\1\u7300\1\u1f00"+
    "\1\u7400\14\u1f00\1\u7500\4\u1f00\246\u0100\1\u7600\20\u0100\1\u7700"+
    "\1\u7800\25\u0100\1\u7900\34\u0100\1\u7a00\14\u1f00\2\u0100\1\u7b00"+
    "\5\u1f00\23\u0100\1\u7c00\17\u0100\1\u7d00\u0adc\u1f00\1\u7e00\1\u7f00"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\5"+
    "\1\6\1\7\1\5\1\10\1\11\1\12\1\5\1\13"+
    "\2\5\1\14\1\15\1\5\1\12\1\16\1\17\1\20"+
    "\11\21\2\5\1\22\1\23\1\22\2\5\5\24\1\25"+
    "\7\24\1\26\5\24\1\27\6\24\1\30\1\5\1\31"+
    "\1\32\1\24\1\5\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\24\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\24\1\52\1\53\1\54\1\55"+
    "\1\24\1\56\1\57\1\60\1\24\1\5\1\61\1\5"+
    "\1\62\6\0\1\63\32\0\2\5\4\24\4\5\1\24"+
    "\2\5\1\0\7\5\1\24\4\5\1\24\5\5\27\24"+
    "\1\5\37\24\1\5\u01ca\24\4\5\14\24\16\5\5\24"+
    "\7\5\1\24\1\5\1\24\21\5\160\0\5\24\1\5"+
    "\2\24\2\5\4\24\1\5\1\24\6\5\1\24\1\5"+
    "\3\24\1\5\1\24\1\5\24\24\1\5\123\24\1\5"+
    "\213\24\1\5\5\0\2\5\246\24\1\5\46\24\2\5"+
    "\1\24\6\5\51\24\6\5\1\24\1\5\55\0\1\5"+
    "\1\0\1\5\2\0\1\5\2\0\1\5\1\0\10\5"+
    "\33\24\4\5\4\24\15\5\6\0\5\5\1\24\4\5"+
    "\13\0\1\5\1\0\3\5\53\24\37\0\4\5\2\24"+
    "\1\0\143\24\1\5\1\24\10\0\1\5\6\0\2\24"+
    "\2\0\1\5\4\0\2\24\12\0\3\24\2\5\1\24"+
    "\17\5\1\0\1\24\1\0\36\24\33\0\2\5\131\24"+
    "\13\0\1\24\16\5\12\0\41\24\11\0\2\24\4\5"+
    "\1\24\2\5\1\0\30\24\4\0\1\24\11\0\1\24"+
    "\3\0\1\24\5\0\22\5\31\24\3\0\4\5\13\24"+
    "\5\5\30\24\1\5\6\24\1\5\2\0\6\5\10\0"+
    "\52\24\72\0\66\24\3\0\1\24\22\0\1\24\7\0"+
    "\12\24\2\0\2\5\12\0\1\5\20\24\3\0\1\5"+
    "\10\24\2\5\2\24\2\5\26\24\1\5\7\24\1\5"+
    "\1\24\3\5\4\24\2\5\1\0\1\24\7\0\2\5"+
    "\2\0\2\5\3\0\1\24\10\5\1\0\4\5\2\24"+
    "\1\5\3\24\2\0\2\5\12\0\4\24\7\5\2\24"+
    "\1\5\1\0\2\5\3\0\1\5\6\24\4\5\2\24"+
    "\2\5\26\24\1\5\7\24\1\5\2\24\1\5\2\24"+
    "\1\5\2\24\2\5\1\0\1\5\5\0\4\5\2\0"+
    "\2\5\3\0\3\5\1\0\7\5\4\24\1\5\1\24"+
    "\7\5\14\0\3\24\1\0\13\5\3\0\1\5\11\24"+
    "\1\5\3\24\1\5\26\24\1\5\7\24\1\5\2\24"+
    "\1\5\5\24\2\5\1\0\1\24\10\0\1\5\3\0"+
    "\1\5\3\0\2\5\1\24\17\5\2\24\2\0\2\5"+
    "\12\0\1\5\1\24\7\5\1\24\6\0\1\5\3\0"+
    "\1\5\10\24\2\5\2\24\2\5\26\24\1\5\7\24"+
    "\1\5\2\24\1\5\5\24\2\5\1\0\1\24\7\0"+
    "\2\5\2\0\2\5\3\0\7\5\3\0\4\5\2\24"+
    "\1\5\3\24\2\0\2\5\12\0\1\5\1\24\20\5"+
    "\1\0\1\24\1\5\6\24\3\5\3\24\1\5\4\24"+
    "\3\5\2\24\1\5\1\24\1\5\2\24\3\5\2\24"+
    "\3\5\3\24\3\5\14\24\4\5\5\0\3\5\3\0"+
    "\1\5\4\0\2\5\1\24\6\5\1\0\16\5\12\0"+
    "\11\5\1\24\6\5\5\0\10\24\1\5\3\24\1\5"+
    "\27\24\1\5\20\24\2\5\1\0\1\24\7\0\1\5"+
    "\3\0\1\5\4\0\7\5\2\0\1\5\3\24\2\5"+
    "\1\24\2\5\2\24\2\0\2\5\12\0\20\5\1\24"+
    "\3\0\1\5\10\24\1\5\3\24\1\5\27\24\1\5"+
    "\12\24\1\5\5\24\2\5\1\0\1\24\7\0\1\5"+
    "\3\0\1\5\4\0\7\5\2\0\6\5\2\24\1\5"+
    "\2\24\2\0\2\5\12\0\1\5\2\24\1\0\14\5"+
    "\4\0\11\24\1\5\3\24\1\5\51\24\2\0\1\24"+
    "\7\0\1\5\3\0\1\5\4\0\1\24\5\5\3\24"+
    "\1\0\7\5\3\24\2\0\2\5\12\0\12\5\6\24"+
    "\1\5\3\0\1\5\22\24\3\5\30\24\1\5\11\24"+
    "\1\5\1\24\2\5\7\24\3\5\1\0\4\5\6\0"+
    "\1\5\1\0\1\5\10\0\6\5\12\0\2\5\2\0"+
    "\15\5\60\24\1\0\2\24\7\0\4\5\10\24\10\0"+
    "\1\5\12\0\47\5\2\24\1\5\1\24\1\5\5\24"+
    "\1\5\30\24\1\5\1\24\1\5\12\24\1\0\2\24"+
    "\11\0\1\24\2\5\5\24\1\5\1\24\1\5\7\0"+
    "\1\5\12\0\2\5\4\24\40\5\1\24\27\5\2\0"+
    "\6\5\12\0\13\5\1\0\1\5\1\0\1\5\1\0"+
    "\4\5\2\0\10\24\1\5\44\24\4\5\24\0\1\5"+
    "\2\0\5\24\13\0\1\5\44\0\11\5\1\0\71\5"+
    "\53\24\24\0\1\24\12\0\6\5\6\24\4\0\4\24"+
    "\3\0\1\24\3\0\2\24\7\0\3\24\4\0\15\24"+
    "\14\0\1\24\17\0\2\5\46\24\1\5\1\24\5\5"+
    "\1\24\2\5\53\24\1\5\115\24\1\5\4\24\2\5"+
    "\7\24\1\5\1\24\1\5\4\24\2\5\51\24\1\5"+
    "\4\24\2\5\41\24\1\5\4\24\2\5\7\24\1\5"+
    "\1\24\1\5\4\24\2\5\17\24\1\5\71\24\1\5"+
    "\4\24\2\5\103\24\2\5\3\0\40\5\20\24\20\5"+
    "\126\24\2\5\6\24\3\5\u016c\24\2\5\21\24\1\5"+
    "\32\24\5\5\113\24\3\5\13\24\7\5\22\24\4\0"+
    "\11\5\23\24\3\0\13\5\22\24\2\0\14\5\15\24"+
    "\1\5\3\24\1\5\2\0\14\5\64\24\40\0\3\5"+
    "\1\24\3\5\2\24\1\0\2\5\12\0\41\5\17\0"+
    "\6\5\131\24\7\5\5\24\2\0\42\24\1\0\1\24"+
    "\5\5\106\24\12\5\37\24\1\5\14\0\4\5\14\0"+
    "\12\5\12\0\36\24\2\5\5\24\13\5\54\24\4\5"+
    "\32\24\6\5\12\0\46\5\27\24\5\0\4\5\65\24"+
    "\12\0\1\5\35\0\2\5\13\0\6\5\12\0\15\5"+
    "\1\24\10\5\16\0\1\5\20\0\61\5\5\0\57\24"+
    "\21\0\10\24\3\5\12\0\21\5\11\0\14\5\3\0"+
    "\36\24\15\0\2\24\12\0\54\24\16\0\14\5\44\24"+
    "\24\0\10\5\12\0\3\5\3\24\12\0\44\24\2\5"+
    "\11\24\7\5\53\24\2\5\3\24\20\5\3\0\1\5"+
    "\25\0\4\24\1\0\6\24\1\0\2\24\3\0\1\24"+
    "\5\5\300\24\100\0\26\24\2\5\6\24\2\5\46\24"+
    "\2\5\6\24\2\5\10\24\1\5\1\24\1\5\1\24"+
    "\1\5\1\24\1\5\37\24\2\5\65\24\1\5\7\24"+
    "\1\5\1\24\3\5\3\24\1\5\7\24\3\5\4\24"+
    "\2\5\6\24\4\5\15\24\5\5\3\24\1\5\7\24"+
    "\16\5\5\0\30\5\2\3\5\0\20\5\2\24\23\5"+
    "\1\24\13\5\5\0\1\5\12\0\1\5\1\24\15\5"+
    "\1\24\20\5\15\24\3\5\41\24\17\5\15\0\4\5"+
    "\1\0\3\5\14\0\21\5\1\24\4\5\1\24\2\5"+
    "\12\24\1\5\1\24\3\5\5\24\6\5\1\24\1\5"+
    "\1\24\1\5\1\24\1\5\4\24\1\5\13\24\2\5"+
    "\4\24\5\5\5\24\4\5\1\24\21\5\51\24\u0177\5"+
    "\345\24\6\5\4\24\3\0\2\24\14\5\46\24\1\5"+
    "\1\24\5\5\1\24\2\5\70\24\7\5\1\24\17\5"+
    "\1\0\27\24\11\5\7\24\1\5\7\24\1\5\7\24"+
    "\1\5\7\24\1\5\7\24\1\5\7\24\1\5\7\24"+
    "\1\5\7\24\1\5\40\0\57\5\1\24\325\5\3\24"+
    "\31\5\11\24\6\0\1\5\5\24\2\5\5\24\4\5"+
    "\126\24\2\5\2\0\2\5\3\24\1\5\132\24\1\5"+
    "\4\24\5\5\53\24\1\5\136\24\21\5\40\24\60\5"+
    "\320\24\100\5\215\24\103\5\56\24\2\5\15\24\3\5"+
    "\20\24\12\0\2\24\24\5\57\24\1\0\4\5\12\0"+
    "\1\5\37\24\2\0\120\24\2\0\45\5\11\24\2\5"+
    "\147\24\2\5\100\24\5\5\2\24\1\5\1\24\1\5"+
    "\5\24\30\5\20\24\1\0\3\24\1\0\4\24\1\0"+
    "\27\24\5\0\4\5\1\0\13\5\1\24\7\5\64\24"+
    "\14\5\2\0\62\24\22\0\12\5\12\0\6\5\22\0"+
    "\6\24\3\5\1\24\1\5\2\24\13\0\34\24\10\0"+
    "\2\5\27\24\15\0\14\5\35\24\3\5\4\0\57\24"+
    "\16\0\16\5\1\24\12\0\6\5\5\24\1\0\12\24"+
    "\12\0\5\24\1\5\51\24\16\0\11\5\3\24\1\0"+
    "\10\24\2\0\2\5\12\0\6\5\27\24\3\5\1\24"+
    "\3\0\62\24\1\0\1\24\3\0\2\24\2\0\5\24"+
    "\2\0\1\24\1\0\1\24\30\5\3\24\2\5\13\24"+
    "\5\0\2\5\3\24\2\0\12\5\6\24\2\5\6\24"+
    "\2\5\6\24\11\5\7\24\1\5\7\24\1\5\53\24"+
    "\1\5\16\24\6\5\163\24\10\0\1\5\2\0\2\5"+
    "\12\0\6\5\244\24\14\5\27\24\4\5\61\24\4\5"+
    "\u0100\3\156\24\2\5\152\24\46\5\7\24\14\5\5\24"+
    "\5\5\1\24\1\0\12\24\1\5\15\24\1\5\5\24"+
    "\1\5\1\24\1\5\2\24\1\5\2\24\1\5\154\24"+
    "\41\5\153\24\22\5\100\24\2\5\66\24\50\5\15\24"+
    "\3\5\20\0\20\5\20\0\3\5\2\24\30\5\3\24"+
    "\31\5\1\24\6\5\5\24\1\5\207\24\2\5\1\0"+
    "\4\5\1\24\13\5\12\0\7\5\32\24\4\5\1\24"+
    "\1\5\32\24\13\5\131\24\3\5\6\24\2\5\6\24"+
    "\2\5\6\24\2\5\3\24\3\5\2\24\3\5\2\24"+
    "\22\5\3\0\4\5\14\24\1\5\32\24\1\5\23\24"+
    "\1\5\2\24\1\5\17\24\2\5\16\24\42\5\173\24"+
    "\105\5\65\24\210\5\1\0\202\5\35\24\3\5\61\24"+
    "\17\5\1\0\37\5\40\24\15\5\36\24\5\5\46\24"+
    "\5\0\5\5\36\24\2\5\44\24\4\5\10\24\1\5"+
    "\5\24\52\5\236\24\2\5\12\0\6\5\44\24\4\5"+
    "\44\24\4\5\50\24\10\5\64\24\14\5\13\24\1\5"+
    "\17\24\1\5\7\24\1\5\2\24\1\5\13\24\1\5"+
    "\17\24\1\5\7\24\1\5\2\24\103\5\67\24\11\5"+
    "\26\24\12\5\10\24\30\5\6\24\1\5\52\24\1\5"+
    "\11\24\105\5\6\24\2\5\1\24\1\5\54\24\1\5"+
    "\2\24\3\5\1\24\2\5\27\24\12\5\27\24\11\5"+
    "\37\24\101\5\23\24\1\5\2\24\12\5\26\24\12\5"+
    "\32\24\106\5\70\24\6\5\2\24\100\5\1\24\3\0"+
    "\1\5\2\0\5\5\4\0\4\24\1\5\3\24\1\5"+
    "\35\24\2\5\3\0\4\5\1\0\40\5\35\24\3\5"+
    "\35\24\43\5\10\24\1\5\34\24\2\0\31\5\66\24"+
    "\12\5\26\24\12\5\23\24\15\5\22\24\156\5\111\24"+
    "\67\5\63\24\15\5\63\24\15\5\44\24\4\0\10\5"+
    "\12\0\u0146\5\52\24\1\5\2\0\3\5\2\24\113\5"+
    "\3\0\35\24\12\5\1\24\10\5\26\24\13\0\37\5"+
    "\22\24\4\0\52\5\25\24\33\5\27\24\11\5\3\0"+
    "\65\24\17\0\37\5\13\0\2\24\2\0\1\24\11\5"+
    "\4\0\55\24\13\0\2\5\1\0\4\5\1\0\12\5"+
    "\1\0\2\5\31\24\7\5\12\0\6\5\3\0\44\24"+
    "\16\0\1\5\12\0\4\5\1\24\2\0\1\24\10\5"+
    "\43\24\1\0\2\5\1\24\11\5\3\0\60\24\16\0"+
    "\4\24\4\5\4\0\1\5\14\0\1\24\1\5\1\24"+
    "\43\5\22\24\1\5\31\24\14\0\6\5\1\0\2\24"+
    "\1\0\76\5\7\24\1\5\1\24\1\5\4\24\1\5"+
    "\17\24\1\5\12\24\7\5\57\24\14\0\5\5\12\0"+
    "\6\5\4\0\1\5\10\24\2\5\2\24\2\5\26\24"+
    "\1\5\7\24\1\5\2\24\1\5\5\24\1\5\2\0"+
    "\1\24\7\0\2\5\2\0\2\5\3\0\2\5\1\24"+
    "\6\5\1\0\5\5\5\24\2\0\2\5\7\0\3\5"+
    "\5\0\213\5\65\24\22\0\4\24\5\5\12\0\4\5"+
    "\1\0\3\24\36\5\60\24\24\0\2\24\1\5\1\24"+
    "\10\5\12\0\246\5\57\24\7\0\2\5\11\0\27\5"+
    "\4\24\2\0\42\5\60\24\21\0\3\5\1\24\13\5"+
    "\12\0\46\5\53\24\15\0\1\24\7\5\12\0\66\5"+
    "\33\24\2\5\17\0\4\5\12\0\6\5\7\24\271\5"+
    "\54\24\17\0\145\5\100\24\12\0\25\5\10\24\2\5"+
    "\1\24\2\5\10\24\1\5\2\24\1\5\30\24\6\0"+
    "\1\5\2\0\2\5\4\0\1\24\1\0\1\24\2\0"+
    "\14\5\12\0\106\5\10\24\2\5\47\24\7\0\2\5"+
    "\7\0\1\24\1\5\1\24\1\0\33\5\1\24\12\0"+
    "\50\24\7\0\1\24\4\0\10\5\1\0\10\5\1\24"+
    "\13\0\56\24\20\0\3\5\1\24\22\5\111\24\7\5"+
    "\11\24\1\5\45\24\10\0\1\5\10\0\1\24\17\5"+
    "\12\0\30\5\36\24\2\5\26\0\1\5\16\0\111\5"+
    "\7\24\1\5\2\24\1\5\46\24\6\0\3\5\1\0"+
    "\1\5\2\0\1\5\7\0\1\24\1\0\10\5\12\0"+
    "\6\5\6\24\1\5\2\24\1\5\40\24\5\0\1\5"+
    "\2\0\1\5\5\0\1\24\7\5\12\0\u0136\5\23\24"+
    "\4\0\11\5\2\0\1\24\1\0\15\24\1\5\42\24"+
    "\7\0\3\5\5\0\15\5\12\0\126\5\1\24\54\5"+
    "\4\24\37\5\232\24\146\5\157\24\21\5\304\24\u014c\5"+
    "\141\24\17\5\60\24\21\0\6\24\17\0\252\5\107\24"+
    "\271\5\71\24\7\5\37\24\1\5\12\0\6\5\117\24"+
    "\1\5\12\0\6\5\36\24\2\5\5\0\13\5\60\24"+
    "\7\0\11\5\4\24\14\5\12\0\11\5\25\24\5\5"+
    "\23\24\260\5\100\24\200\5\113\24\4\5\1\0\1\24"+
    "\67\0\7\5\4\0\15\24\100\5\2\24\1\5\1\24"+
    "\1\0\13\5\2\0\16\5\370\24\10\5\326\24\52\5"+
    "\11\24\u01e7\5\4\24\1\5\7\24\1\5\2\24\1\5"+
    "\43\24\17\5\1\24\35\5\3\24\2\5\1\24\16\5"+
    "\4\24\10\5\u018c\24\4\5\153\24\5\5\15\24\3\5"+
    "\11\24\7\5\12\24\3\5\2\0\1\5\4\0\134\5"+
    "\56\0\2\5\27\0\u011e\5\5\0\3\5\26\0\2\5"+
    "\7\0\36\5\4\0\224\5\3\0\273\5\125\24\1\5"+
    "\107\24\1\5\2\24\2\5\1\24\2\5\2\24\2\5"+
    "\4\24\1\5\14\24\1\5\1\24\1\5\7\24\1\5"+
    "\101\24\1\5\4\24\2\5\10\24\1\5\7\24\1\5"+
    "\34\24\1\5\4\24\1\5\5\24\1\5\1\24\3\5"+
    "\7\24\1\5\u0154\24\2\5\31\24\1\5\31\24\1\5"+
    "\37\24\1\5\31\24\1\5\37\24\1\5\31\24\1\5"+
    "\37\24\1\5\31\24\1\5\37\24\1\5\31\24\1\5"+
    "\10\24\2\5\151\0\4\5\62\0\10\5\1\0\16\5"+
    "\1\0\26\5\5\0\1\5\17\0\120\5\37\24\6\5"+
    "\6\24\325\5\7\0\1\5\21\0\2\5\7\0\1\5"+
    "\2\0\1\5\5\0\5\5\76\24\41\5\1\0\160\5"+
    "\55\24\3\5\7\0\7\24\2\5\12\0\4\5\1\24"+
    "\u0141\5\36\24\1\0\21\5\54\24\16\0\5\5\1\24"+
    "\320\5\34\24\16\0\346\5\7\24\1\5\4\24\1\5"+
    "\2\24\1\5\17\24\1\5\305\24\13\5\7\0\51\5"+
    "\104\24\7\0\1\24\4\5\12\0\u0156\5\1\24\117\5"+
    "\4\24\1\5\33\24\1\5\2\24\1\5\1\24\2\5"+
    "\1\24\1\5\12\24\1\5\4\24\1\5\1\24\1\5"+
    "\1\24\6\5\1\24\4\5\1\24\1\5\1\24\1\5"+
    "\1\24\1\5\3\24\1\5\2\24\1\5\1\24\2\5"+
    "\1\24\1\5\1\24\1\5\1\24\1\5\1\24\1\5"+
    "\1\24\1\5\2\24\1\5\1\24\2\5\4\24\1\5"+
    "\7\24\1\5\4\24\1\5\4\24\1\5\1\24\1\5"+
    "\12\24\1\5\21\24\5\5\3\24\1\5\5\24\1\5"+
    "\21\24\u0134\5\12\0\6\5\340\24\40\5\72\24\6\5"+
    "\336\24\2\5\u0182\24\16\5\u0131\24\37\5\36\24\342\5"+
    "\113\24\5\5\u0160\24\121\5\1\0\36\5\140\0\200\5"+
    "\360\0\20\5";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[32768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\3\2\1\1\1\2\1\1\3\3\2\4"+
    "\1\5\23\1\3\0\1\5\1\6\1\7\6\0\1\10"+
    "\12\0\1\10\3\0\1\11\13\0\1\4\26\0\1\4"+
    "\36\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[126];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\64\0\150\0\234\0\320\0\u0104\0\u0138"+
    "\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\320\0\u0270\0\u02a4"+
    "\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444"+
    "\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4"+
    "\0\u0618\0\u064c\0\u0680\0\u06b4\0\64\0\u06e8\0\64\0\u071c"+
    "\0\u0208\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0548"+
    "\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4"+
    "\0\64\0\u0a28\0\u0a5c\0\u0a90\0\64\0\u0ac4\0\u0af8\0\u0b2c"+
    "\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc"+
    "\0\u071c\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38"+
    "\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8"+
    "\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144\0\64"+
    "\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0\0\u12e4"+
    "\0\u1318\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484"+
    "\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u1624"+
    "\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[126];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\2\1\5\1\6\1\7"+
    "\1\10\1\11\1\2\1\12\1\11\1\2\1\13\1\14"+
    "\1\15\1\16\1\6\1\2\1\17\1\20\1\21\3\2"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\2"+
    "\1\31\1\2\1\32\1\2\1\33\1\34\1\35\1\36"+
    "\1\2\1\37\1\2\1\40\1\2\1\41\2\2\67\0"+
    "\1\3\67\0\1\42\4\0\1\43\1\0\1\44\71\0"+
    "\1\45\40\0\2\7\1\3\1\7\1\4\57\7\11\0"+
    "\1\46\12\0\4\46\3\0\26\46\26\0\1\47\54\0"+
    "\1\11\6\0\1\47\57\0\1\11\3\0\1\47\56\0"+
    "\1\50\1\0\2\51\60\0\1\50\1\0\2\15\75\0"+
    "\1\52\100\0\1\53\65\0\1\54\60\0\1\55\3\0"+
    "\1\56\62\0\1\57\56\0\1\60\2\0\1\61\52\0"+
    "\1\62\71\0\1\63\11\0\1\64\47\0\1\65\4\0"+
    "\1\66\1\0\1\67\56\0\1\70\56\0\1\71\5\0"+
    "\1\72\1\71\3\0\1\71\43\0\1\73\100\0\1\74"+
    "\65\0\1\75\44\0\1\76\63\0\1\77\3\0\1\100"+
    "\76\0\1\101\53\0\1\102\1\103\63\0\1\104\26\0"+
    "\1\105\6\0\1\44\12\0\1\106\41\0\1\107\63\0"+
    "\1\110\55\0\1\46\10\0\1\46\6\0\2\46\2\0"+
    "\4\46\3\0\26\46\2\0\1\46\20\0\2\111\107\0"+
    "\1\112\65\0\1\113\71\0\1\114\44\0\1\75\100\0"+
    "\1\115\47\0\1\116\73\0\1\117\54\0\1\71\4\0"+
    "\1\71\61\0\1\120\55\0\1\121\75\0\1\122\66\0"+
    "\1\71\61\0\1\123\63\0\1\124\64\0\1\125\60\0"+
    "\1\126\64\0\1\127\4\0\1\75\62\0\1\130\53\0"+
    "\1\131\74\0\1\132\67\0\1\71\46\0\1\133\74\0"+
    "\1\134\46\0\1\135\32\0\1\105\6\0\1\44\100\0"+
    "\1\136\31\0\14\137\1\0\47\137\6\0\1\140\130\0"+
    "\1\114\47\0\1\71\63\0\1\140\63\0\1\141\57\0"+
    "\1\142\104\0\1\143\47\0\1\144\62\0\1\145\57\0"+
    "\1\146\76\0\1\71\51\0\1\147\77\0\1\141\47\0"+
    "\1\150\74\0\1\151\71\0\1\71\63\0\1\113\65\0"+
    "\1\152\53\0\1\113\60\0\1\71\66\0\1\153\32\0"+
    "\1\154\47\0\6\137\1\155\55\137\52\0\1\156\55\0"+
    "\1\71\62\0\1\157\57\0\1\160\75\0\1\156\57\0"+
    "\1\161\51\0\1\162\66\0\1\163\75\0\1\164\65\0"+
    "\1\165\47\0\1\71\56\0\1\166\40\0\1\167\131\0"+
    "\1\71\56\0\1\170\61\0\1\131\63\0\1\101\63\0"+
    "\1\71\51\0\1\71\65\0\1\147\75\0\1\71\22\0"+
    "\1\171\136\0\1\172\57\0\1\113\70\0\1\110\7\0"+
    "\1\173\63\0\1\174\71\0\1\175\55\0\1\176\5\0"+
    "\1\175\62\0\1\110\50\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6032];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\36\1\3\0\1\11\1\1\1\11\6\0"+
    "\1\1\12\0\1\11\3\0\1\11\13\0\1\1\26\0"+
    "\1\11\36\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[126];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column) {
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR", yyline, yycolumn);
            }
          // fall through
          case 10: break;
          case 2:
            { /*Ignore*/
            }
          // fall through
          case 11: break;
          case 3:
            { return token(yytext(), "ARITMÉTICO", yyline, yycolumn);
            }
          // fall through
          case 12: break;
          case 4:
            { return token(yytext(), "CONSTANTES", yyline, yycolumn);
            }
          // fall through
          case 13: break;
          case 5:
            { return token(yytext(), "COMPARACIÓN", yyline, yycolumn);
            }
          // fall through
          case 14: break;
          case 6:
            { return token(yytext(), "IDENTIFICADOR", yyline, yycolumn);
            }
          // fall through
          case 15: break;
          case 7:
            { return token(yytext(), "ASIGNACIÓN", yyline, yycolumn);
            }
          // fall through
          case 16: break;
          case 8:
            { return token(yytext(), "PALABRAS CLAVE", yyline, yycolumn);
            }
          // fall through
          case 17: break;
          case 9:
            { return token(yytext(), "LÓGICOS", yyline, yycolumn);
            }
          // fall through
          case 18: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
