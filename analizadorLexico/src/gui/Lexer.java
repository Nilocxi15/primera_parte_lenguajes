package gui;

// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/logic/Lexer.flex

import compilerTools.Token;


@SuppressWarnings("fallthrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\126\u0100\1\u2600\1\u0100\1\u2700"+
    "\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00\10\u2e00"+
    "\31\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000\1\u5100"+
    "\3\u0100\1\u5200\1\u5300\1\u5400\11\u1f00\1\u5500\4\u0100\1\u5600"+
    "\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900\2\u1f00"+
    "\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00\41\u1f00"+
    "\1\u5f00\1\u0100\1\u6000\1\u6100\11\u1f00\1\u6200\22\u1f00\1\u6300"+
    "\1\u1f00\1\u6400\1\u6500\1\u1f00\1\u6600\1\u6700\1\u6800\1\u6900"+
    "\2\u1f00\1\u6a00\4\u1f00\1\u6b00\1\u6c00\1\u6d00\1\u6e00\4\u1f00"+
    "\1\u6f00\1\u7000\1\u7100\2\u1f00\1\u7200\1\u1f00\1\u7300\14\u1f00"+
    "\1\u7400\4\u1f00\246\u0100\1\u7500\20\u0100\1\u7600\1\u7700\25\u0100"+
    "\1\u7800\34\u0100\1\u7900\14\u1f00\2\u0100\1\u7a00\5\u1f00\23\u0100"+
    "\1\u7b00\u0aec\u1f00\1\u7c00\1\u7d00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\5"+
    "\1\6\1\7\1\5\1\10\1\11\1\12\1\5\1\13"+
    "\2\14\1\15\1\16\1\14\1\12\1\17\1\20\1\21"+
    "\11\22\2\14\1\23\1\24\1\23\2\5\5\25\1\26"+
    "\7\25\1\27\5\25\1\30\6\25\1\31\1\5\1\32"+
    "\1\33\1\25\1\5\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\25\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\25\1\53\1\54\1\55\1\56"+
    "\1\25\1\57\1\60\1\61\1\25\1\14\1\62\1\14"+
    "\1\63\6\0\1\64\32\0\2\5\4\65\4\5\1\65"+
    "\2\5\1\0\7\5\1\65\4\5\1\65\5\5\1\65"+
    "\1\25\7\65\1\25\3\65\1\25\3\65\1\25\1\65"+
    "\1\25\3\65\1\5\2\65\1\25\1\65\1\25\4\65"+
    "\1\25\7\65\1\25\3\65\1\25\3\65\1\25\1\65"+
    "\1\25\3\65\1\5\2\65\1\25\1\65\1\25\u01c5\65"+
    "\4\5\14\65\16\5\5\65\7\5\1\65\1\5\1\65"+
    "\21\5\160\0\5\65\1\5\2\65\2\5\4\65\1\5"+
    "\1\65\6\5\1\65\1\5\3\65\1\5\1\65\1\5"+
    "\24\65\1\5\123\65\1\5\213\65\1\5\5\0\2\5"+
    "\246\65\1\5\46\65\2\5\1\65\6\5\51\65\6\5"+
    "\1\65\1\5\55\0\1\5\1\0\1\5\2\0\1\5"+
    "\2\0\1\5\1\0\10\5\33\65\4\5\4\65\15\5"+
    "\6\0\5\5\1\65\4\5\13\0\1\5\1\0\3\5"+
    "\53\65\37\0\4\5\2\65\1\0\143\65\1\5\1\65"+
    "\10\0\1\5\6\0\2\65\2\0\1\5\4\0\2\65"+
    "\12\0\3\65\2\5\1\65\17\5\1\0\1\65\1\0"+
    "\36\65\33\0\2\5\131\65\13\0\1\65\16\5\12\0"+
    "\41\65\11\0\2\65\4\5\1\65\2\5\1\0\30\65"+
    "\4\0\1\65\11\0\1\65\3\0\1\65\5\0\22\5"+
    "\31\65\3\0\4\5\13\65\5\5\30\65\1\5\6\65"+
    "\1\5\2\0\6\5\10\0\52\65\72\0\66\65\3\0"+
    "\1\65\22\0\1\65\7\0\12\65\2\0\2\5\12\0"+
    "\1\5\20\65\3\0\1\5\10\65\2\5\2\65\2\5"+
    "\26\65\1\5\7\65\1\5\1\65\3\5\4\65\2\5"+
    "\1\0\1\65\7\0\2\5\2\0\2\5\3\0\1\65"+
    "\10\5\1\0\4\5\2\65\1\5\3\65\2\0\2\5"+
    "\12\0\4\65\7\5\2\65\1\5\1\0\2\5\3\0"+
    "\1\5\6\65\4\5\2\65\2\5\26\65\1\5\7\65"+
    "\1\5\2\65\1\5\2\65\1\5\2\65\2\5\1\0"+
    "\1\5\5\0\4\5\2\0\2\5\3\0\3\5\1\0"+
    "\7\5\4\65\1\5\1\65\7\5\14\0\3\65\1\0"+
    "\13\5\3\0\1\5\11\65\1\5\3\65\1\5\26\65"+
    "\1\5\7\65\1\5\2\65\1\5\5\65\2\5\1\0"+
    "\1\65\10\0\1\5\3\0\1\5\3\0\2\5\1\65"+
    "\17\5\2\65\2\0\2\5\12\0\1\5\1\65\7\5"+
    "\1\65\6\0\1\5\3\0\1\5\10\65\2\5\2\65"+
    "\2\5\26\65\1\5\7\65\1\5\2\65\1\5\5\65"+
    "\2\5\1\0\1\65\7\0\2\5\2\0\2\5\3\0"+
    "\7\5\3\0\4\5\2\65\1\5\3\65\2\0\2\5"+
    "\12\0\1\5\1\65\20\5\1\0\1\65\1\5\6\65"+
    "\3\5\3\65\1\5\4\65\3\5\2\65\1\5\1\65"+
    "\1\5\2\65\3\5\2\65\3\5\3\65\3\5\14\65"+
    "\4\5\5\0\3\5\3\0\1\5\4\0\2\5\1\65"+
    "\6\5\1\0\16\5\12\0\11\5\1\65\6\5\5\0"+
    "\10\65\1\5\3\65\1\5\27\65\1\5\20\65\2\5"+
    "\1\0\1\65\7\0\1\5\3\0\1\5\4\0\7\5"+
    "\2\0\1\5\3\65\2\5\1\65\2\5\2\65\2\0"+
    "\2\5\12\0\20\5\1\65\3\0\1\5\10\65\1\5"+
    "\3\65\1\5\27\65\1\5\12\65\1\5\5\65\2\5"+
    "\1\0\1\65\7\0\1\5\3\0\1\5\4\0\7\5"+
    "\2\0\6\5\2\65\1\5\2\65\2\0\2\5\12\0"+
    "\1\5\2\65\15\5\4\0\11\65\1\5\3\65\1\5"+
    "\51\65\2\0\1\65\7\0\1\5\3\0\1\5\4\0"+
    "\1\65\5\5\3\65\1\0\7\5\3\65\2\0\2\5"+
    "\12\0\12\5\6\65\1\5\3\0\1\5\22\65\3\5"+
    "\30\65\1\5\11\65\1\5\1\65\2\5\7\65\3\5"+
    "\1\0\4\5\6\0\1\5\1\0\1\5\10\0\6\5"+
    "\12\0\2\5\2\0\15\5\60\65\1\0\2\65\7\0"+
    "\4\5\10\65\10\0\1\5\12\0\47\5\2\65\1\5"+
    "\1\65\1\5\5\65\1\5\30\65\1\5\1\65\1\5"+
    "\12\65\1\0\2\65\11\0\1\65\2\5\5\65\1\5"+
    "\1\65\1\5\6\0\2\5\12\0\2\5\4\65\40\5"+
    "\1\65\27\5\2\0\6\5\12\0\13\5\1\0\1\5"+
    "\1\0\1\5\1\0\4\5\2\0\10\65\1\5\44\65"+
    "\4\5\24\0\1\5\2\0\5\65\13\0\1\5\44\0"+
    "\11\5\1\0\71\5\53\65\24\0\1\65\12\0\6\5"+
    "\6\65\4\0\4\65\3\0\1\65\3\0\2\65\7\0"+
    "\3\65\4\0\15\65\14\0\1\65\17\0\2\5\46\65"+
    "\1\5\1\65\5\5\1\65\2\5\53\65\1\5\115\65"+
    "\1\5\4\65\2\5\7\65\1\5\1\65\1\5\4\65"+
    "\2\5\51\65\1\5\4\65\2\5\41\65\1\5\4\65"+
    "\2\5\7\65\1\5\1\65\1\5\4\65\2\5\17\65"+
    "\1\5\71\65\1\5\4\65\2\5\103\65\2\5\3\0"+
    "\40\5\20\65\20\5\126\65\2\5\6\65\3\5\u016c\65"+
    "\2\5\21\65\1\5\32\65\5\5\113\65\3\5\13\65"+
    "\7\5\22\65\4\0\11\5\23\65\3\0\13\5\22\65"+
    "\2\0\14\5\15\65\1\5\3\65\1\5\2\0\14\5"+
    "\64\65\40\0\3\5\1\65\3\5\2\65\1\0\2\5"+
    "\12\0\41\5\17\0\6\5\131\65\7\5\5\65\2\0"+
    "\42\65\1\0\1\65\5\5\106\65\12\5\37\65\1\5"+
    "\14\0\4\5\14\0\12\5\12\0\36\65\2\5\5\65"+
    "\13\5\54\65\4\5\32\65\6\5\12\0\46\5\27\65"+
    "\5\0\4\5\65\65\12\0\1\5\35\0\2\5\13\0"+
    "\6\5\12\0\15\5\1\65\10\5\16\0\1\5\20\0"+
    "\61\5\5\0\57\65\21\0\10\65\3\5\12\0\21\5"+
    "\11\0\14\5\3\0\36\65\15\0\2\65\12\0\54\65"+
    "\16\0\14\5\44\65\24\0\10\5\12\0\3\5\3\65"+
    "\12\0\44\65\2\5\11\65\7\5\53\65\2\5\3\65"+
    "\20\5\3\0\1\5\25\0\4\65\1\0\6\65\1\0"+
    "\2\65\3\0\1\65\5\5\300\65\100\0\26\65\2\5"+
    "\6\65\2\5\46\65\2\5\6\65\2\5\10\65\1\5"+
    "\1\65\1\5\1\65\1\5\1\65\1\5\37\65\2\5"+
    "\65\65\1\5\7\65\1\5\1\65\3\5\3\65\1\5"+
    "\7\65\3\5\4\65\2\5\6\65\4\5\15\65\5\5"+
    "\3\65\1\5\7\65\16\5\5\0\30\5\2\3\5\0"+
    "\20\5\2\65\23\5\1\65\13\5\5\0\1\5\12\0"+
    "\1\5\1\65\15\5\1\65\20\5\15\65\3\5\41\65"+
    "\17\5\15\0\4\5\1\0\3\5\14\0\21\5\1\65"+
    "\4\5\1\65\2\5\12\65\1\5\1\65\3\5\5\65"+
    "\6\5\1\65\1\5\1\65\1\5\1\65\1\5\4\65"+
    "\1\5\13\65\2\5\4\65\5\5\5\65\4\5\1\65"+
    "\21\5\51\65\u0177\5\345\65\6\5\4\65\3\0\2\65"+
    "\14\5\46\65\1\5\1\65\5\5\1\65\2\5\70\65"+
    "\7\5\1\65\17\5\1\0\27\65\11\5\7\65\1\5"+
    "\7\65\1\5\7\65\1\5\7\65\1\5\7\65\1\5"+
    "\7\65\1\5\7\65\1\5\7\65\1\5\40\0\57\5"+
    "\1\65\325\5\3\65\31\5\11\65\6\0\1\5\5\65"+
    "\2\5\5\65\4\5\126\65\2\5\2\0\2\5\3\65"+
    "\1\5\132\65\1\5\4\65\5\5\53\65\1\5\136\65"+
    "\21\5\40\65\60\5\320\65\100\5\215\65\103\5\56\65"+
    "\2\5\15\65\3\5\20\65\12\0\2\65\24\5\57\65"+
    "\1\0\4\5\12\0\1\5\37\65\2\0\120\65\2\0"+
    "\45\5\11\65\2\5\147\65\2\5\100\65\5\5\2\65"+
    "\1\5\1\65\1\5\5\65\30\5\20\65\1\0\3\65"+
    "\1\0\4\65\1\0\27\65\5\0\4\5\1\0\13\5"+
    "\1\65\7\5\64\65\14\5\2\0\62\65\22\0\12\5"+
    "\12\0\6\5\22\0\6\65\3\5\1\65\1\5\2\65"+
    "\13\0\34\65\10\0\2\5\27\65\15\0\14\5\35\65"+
    "\3\5\4\0\57\65\16\0\16\5\1\65\12\0\6\5"+
    "\5\65\1\0\12\65\12\0\5\65\1\5\51\65\16\0"+
    "\11\5\3\65\1\0\10\65\2\0\2\5\12\0\6\5"+
    "\27\65\3\5\1\65\3\0\62\65\1\0\1\65\3\0"+
    "\2\65\2\0\5\65\2\0\1\65\1\0\1\65\30\5"+
    "\3\65\2\5\13\65\5\0\2\5\3\65\2\0\12\5"+
    "\6\65\2\5\6\65\2\5\6\65\11\5\7\65\1\5"+
    "\7\65\1\5\53\65\1\5\16\65\6\5\163\65\10\0"+
    "\1\5\2\0\2\5\12\0\6\5\244\65\14\5\27\65"+
    "\4\5\61\65\4\5\u0100\3\156\65\2\5\152\65\46\5"+
    "\7\65\14\5\5\65\5\5\1\65\1\0\12\65\1\5"+
    "\15\65\1\5\5\65\1\5\1\65\1\5\2\65\1\5"+
    "\2\65\1\5\154\65\41\5\153\65\22\5\100\65\2\5"+
    "\66\65\50\5\15\65\3\5\20\0\20\5\20\0\3\5"+
    "\2\65\30\5\3\65\31\5\1\65\6\5\5\65\1\5"+
    "\207\65\2\5\1\0\4\5\1\65\13\5\12\0\7\5"+
    "\32\65\4\5\1\65\1\5\32\65\13\5\131\65\3\5"+
    "\6\65\2\5\6\65\2\5\6\65\2\5\3\65\3\5"+
    "\2\65\3\5\2\65\22\5\3\0\4\5\14\65\1\5"+
    "\32\65\1\5\23\65\1\5\2\65\1\5\17\65\2\5"+
    "\16\65\42\5\173\65\105\5\65\65\210\5\1\0\202\5"+
    "\35\65\3\5\61\65\17\5\1\0\37\5\40\65\15\5"+
    "\36\65\5\5\46\65\5\0\5\5\36\65\2\5\44\65"+
    "\4\5\10\65\1\5\5\65\52\5\236\65\2\5\12\0"+
    "\6\5\44\65\4\5\44\65\4\5\50\65\10\5\64\65"+
    "\14\5\13\65\1\5\17\65\1\5\7\65\1\5\2\65"+
    "\1\5\13\65\1\5\17\65\1\5\7\65\1\5\2\65"+
    "\103\5\67\65\11\5\26\65\12\5\10\65\30\5\6\65"+
    "\1\5\52\65\1\5\11\65\105\5\6\65\2\5\1\65"+
    "\1\5\54\65\1\5\2\65\3\5\1\65\2\5\27\65"+
    "\12\5\27\65\11\5\37\65\101\5\23\65\1\5\2\65"+
    "\12\5\26\65\12\5\32\65\106\5\70\65\6\5\2\65"+
    "\100\5\1\65\3\0\1\5\2\0\5\5\4\0\4\65"+
    "\1\5\3\65\1\5\35\65\2\5\3\0\4\5\1\0"+
    "\40\5\35\65\3\5\35\65\43\5\10\65\1\5\34\65"+
    "\2\0\31\5\66\65\12\5\26\65\12\5\23\65\15\5"+
    "\22\65\156\5\111\65\67\5\63\65\15\5\63\65\15\5"+
    "\44\65\4\0\10\5\12\0\u0146\5\52\65\1\5\2\0"+
    "\3\5\2\65\116\5\35\65\12\5\1\65\10\5\26\65"+
    "\13\0\37\5\22\65\4\0\52\5\25\65\33\5\27\65"+
    "\11\5\3\0\65\65\17\0\37\5\13\0\2\65\2\0"+
    "\1\65\11\5\4\0\55\65\13\0\2\5\1\0\4\5"+
    "\1\0\12\5\1\0\2\5\31\65\7\5\12\0\6\5"+
    "\3\0\44\65\16\0\1\5\12\0\4\5\1\65\2\0"+
    "\1\65\10\5\43\65\1\0\2\5\1\65\11\5\3\0"+
    "\60\65\16\0\4\65\4\5\4\0\1\5\14\0\1\65"+
    "\1\5\1\65\43\5\22\65\1\5\31\65\14\0\6\5"+
    "\1\0\101\5\7\65\1\5\1\65\1\5\4\65\1\5"+
    "\17\65\1\5\12\65\7\5\57\65\14\0\5\5\12\0"+
    "\6\5\4\0\1\5\10\65\2\5\2\65\2\5\26\65"+
    "\1\5\7\65\1\5\2\65\1\5\5\65\1\5\2\0"+
    "\1\65\7\0\2\5\2\0\2\5\3\0\2\5\1\65"+
    "\6\5\1\0\5\5\5\65\2\0\2\5\7\0\3\5"+
    "\5\0\213\5\65\65\22\0\4\65\5\5\12\0\4\5"+
    "\1\0\3\65\36\5\60\65\24\0\2\65\1\5\1\65"+
    "\10\5\12\0\246\5\57\65\7\0\2\5\11\0\27\5"+
    "\4\65\2\0\42\5\60\65\21\0\3\5\1\65\13\5"+
    "\12\0\46\5\53\65\15\0\1\65\7\5\12\0\66\5"+
    "\33\65\2\5\17\0\4\5\12\0\6\5\7\65\271\5"+
    "\54\65\17\0\145\5\100\65\12\0\25\5\10\65\2\5"+
    "\1\65\2\5\10\65\1\5\2\65\1\5\30\65\6\0"+
    "\1\5\2\0\2\5\4\0\1\65\1\0\1\65\2\0"+
    "\14\5\12\0\106\5\10\65\2\5\47\65\7\0\2\5"+
    "\7\0\1\65\1\5\1\65\1\0\33\5\1\65\12\0"+
    "\50\65\7\0\1\65\4\0\10\5\1\0\10\5\1\65"+
    "\13\0\56\65\20\0\3\5\1\65\22\5\111\65\7\5"+
    "\11\65\1\5\45\65\10\0\1\5\10\0\1\65\17\5"+
    "\12\0\30\5\36\65\2\5\26\0\1\5\16\0\111\5"+
    "\7\65\1\5\2\65\1\5\46\65\6\0\3\5\1\0"+
    "\1\5\2\0\1\5\7\0\1\65\1\0\10\5\12\0"+
    "\6\5\6\65\1\5\2\65\1\5\40\65\5\0\1\5"+
    "\2\0\1\5\5\0\1\65\7\5\12\0\u0136\5\23\65"+
    "\4\0\271\5\1\65\54\5\4\65\37\5\232\65\146\5"+
    "\157\65\21\5\304\65\u014c\5\141\65\17\5\57\65\1\5"+
    "\11\0\307\5\107\65\271\5\71\65\7\5\37\65\1\5"+
    "\12\0\6\5\117\65\1\5\12\0\6\5\36\65\2\5"+
    "\5\0\13\5\60\65\7\0\11\5\4\65\14\5\12\0"+
    "\11\5\25\65\5\5\23\65\260\5\100\65\200\5\113\65"+
    "\4\5\1\0\1\65\67\0\7\5\4\0\15\65\100\5"+
    "\2\65\1\5\1\65\1\0\13\5\2\0\16\5\370\65"+
    "\10\5\326\65\52\5\11\65\u01e7\5\4\65\1\5\7\65"+
    "\1\5\2\65\1\5\43\65\55\5\3\65\21\5\4\65"+
    "\10\5\u018c\65\4\5\153\65\5\5\15\65\3\5\11\65"+
    "\7\5\12\65\3\5\2\0\1\5\4\0\134\5\56\0"+
    "\2\5\27\0\u011e\5\5\0\3\5\26\0\2\5\7\0"+
    "\36\5\4\0\224\5\3\0\273\5\125\65\1\5\107\65"+
    "\1\5\2\65\2\5\1\65\2\5\2\65\2\5\4\65"+
    "\1\5\14\65\1\5\1\65\1\5\7\65\1\5\101\65"+
    "\1\5\4\65\2\5\10\65\1\5\7\65\1\5\34\65"+
    "\1\5\4\65\1\5\5\65\1\5\1\65\3\5\7\65"+
    "\1\5\u0154\65\2\5\31\65\1\5\31\65\1\5\37\65"+
    "\1\5\31\65\1\5\37\65\1\5\31\65\1\5\37\65"+
    "\1\5\31\65\1\5\37\65\1\5\31\65\1\5\10\65"+
    "\2\5\151\0\4\5\62\0\10\5\1\0\16\5\1\0"+
    "\26\5\5\0\1\5\17\0\120\5\37\65\341\5\7\0"+
    "\1\5\21\0\2\5\7\0\1\5\2\0\1\5\5\0"+
    "\325\5\55\65\3\5\7\0\7\65\2\5\12\0\4\5"+
    "\1\65\u0141\5\36\65\1\0\21\5\54\65\16\0\5\5"+
    "\1\65\340\5\7\65\1\5\4\65\1\5\2\65\1\5"+
    "\17\65\1\5\305\65\13\5\7\0\51\5\104\65\7\0"+
    "\1\65\4\5\12\0\u0156\5\1\65\117\5\4\65\1\5"+
    "\33\65\1\5\2\65\1\5\1\65\2\5\1\65\1\5"+
    "\12\65\1\5\4\65\1\5\1\65\1\5\1\65\6\5"+
    "\1\65\4\5\1\65\1\5\1\65\1\5\1\65\1\5"+
    "\3\65\1\5\2\65\1\5\1\65\2\5\1\65\1\5"+
    "\1\65\1\5\1\65\1\5\1\65\1\5\1\65\1\5"+
    "\2\65\1\5\1\65\2\5\4\65\1\5\7\65\1\5"+
    "\4\65\1\5\4\65\1\5\1\65\1\5\12\65\1\5"+
    "\21\65\5\5\3\65\1\5\5\65\1\5\21\65\u0134\5"+
    "\12\0\6\5\340\65\40\5\71\65\7\5\336\65\2\5"+
    "\u0182\65\16\5\u0131\65\37\5\36\65\342\5\113\65\266\5"+
    "\1\0\36\5\140\0\200\5\360\0\20\5";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[32256];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\3\2\1\1\1\2\1\1\1\3\1\4"+
    "\2\3\2\5\1\6\1\7\24\10\3\0\1\6\1\11"+
    "\1\7\2\0\4\10\1\12\11\10\1\12\3\10\1\13"+
    "\7\10\4\0\1\5\24\10\2\0\2\5\13\10\2\0"+
    "\10\10\2\0\1\10\6\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\66\0\154\0\242\0\330\0\u010e\0\u0144"+
    "\0\u017a\0\66\0\u01b0\0\u01e6\0\u021c\0\u0252\0\330\0\330"+
    "\0\u0288\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402"+
    "\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2"+
    "\0\u05e8\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\66"+
    "\0\u0762\0\66\0\u0798\0\u021c\0\u07ce\0\u0804\0\u083a\0\u0870"+
    "\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20"+
    "\0\u0a56\0\u0a8c\0\u0288\0\u0ac2\0\u0af8\0\u0b2e\0\u0288\0\u0b64"+
    "\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14"+
    "\0\u0d4a\0\u0d80\0\u0798\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e"+
    "\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e"+
    "\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee"+
    "\0\u1224\0\66\0\u0288\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332"+
    "\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2"+
    "\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692"+
    "\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842"+
    "\0\u1878";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\2\1\5\1\6\1\7"+
    "\1\10\1\11\1\2\1\12\1\13\1\11\1\2\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\2\12\1\2\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\21\1\34\1\21\1\35\1\21\1\36\1\37"+
    "\1\40\1\41\1\21\1\42\1\21\1\43\1\21\1\44"+
    "\2\2\1\0\1\2\70\0\1\3\71\0\1\45\4\0"+
    "\1\46\2\0\1\47\73\0\1\50\41\0\2\7\1\3"+
    "\1\7\1\4\61\7\11\0\1\51\13\0\4\51\3\0"+
    "\26\51\3\0\1\51\24\0\1\52\56\0\1\11\6\0"+
    "\1\52\61\0\1\11\3\0\1\52\60\0\1\53\1\0"+
    "\2\54\62\0\1\53\1\0\2\16\64\0\2\21\2\0"+
    "\4\21\3\0\26\21\25\0\2\21\2\0\4\21\3\0"+
    "\1\55\25\21\25\0\2\21\2\0\4\21\3\0\15\21"+
    "\1\56\10\21\25\0\2\21\2\0\4\21\3\0\17\21"+
    "\1\57\6\21\25\0\2\21\2\0\4\21\3\0\14\21"+
    "\1\60\3\21\1\61\5\21\25\0\2\21\2\0\4\21"+
    "\3\0\17\21\1\62\6\21\25\0\2\21\2\0\4\21"+
    "\3\0\12\21\1\40\2\21\1\63\10\21\25\0\2\21"+
    "\2\0\4\21\3\0\4\21\1\64\21\21\25\0\2\21"+
    "\2\0\4\21\3\0\12\21\1\65\11\21\1\66\1\21"+
    "\25\0\2\21\2\0\4\21\3\0\10\21\1\67\4\21"+
    "\1\70\1\21\1\71\6\21\25\0\2\21\2\0\4\21"+
    "\3\0\12\21\1\72\13\21\25\0\2\21\2\0\4\21"+
    "\3\0\5\21\1\73\5\21\1\74\1\73\3\21\1\73"+
    "\5\21\25\0\2\21\2\0\4\21\3\0\1\75\25\21"+
    "\25\0\2\21\2\0\4\21\3\0\15\21\1\76\10\21"+
    "\25\0\2\21\2\0\4\21\3\0\17\21\1\77\6\21"+
    "\25\0\2\21\2\0\4\21\3\0\1\100\25\21\25\0"+
    "\2\21\2\0\4\21\3\0\1\101\3\21\1\102\21\21"+
    "\25\0\2\21\2\0\4\21\3\0\17\21\1\103\6\21"+
    "\25\0\2\21\2\0\4\21\3\0\7\21\1\104\1\105"+
    "\15\21\25\0\2\21\2\0\4\21\3\0\10\21\1\106"+
    "\15\21\12\0\1\107\7\0\1\47\12\0\1\110\42\0"+
    "\1\111\65\0\1\112\57\0\1\51\10\0\1\51\7\0"+
    "\2\51\2\0\4\51\3\0\26\51\2\0\2\51\21\0"+
    "\2\113\64\0\2\21\2\0\4\21\3\0\12\21\1\114"+
    "\13\21\25\0\2\21\2\0\4\21\3\0\14\21\1\115"+
    "\11\21\25\0\2\21\2\0\4\21\3\0\22\21\1\116"+
    "\3\21\25\0\2\21\2\0\4\21\3\0\3\21\1\77"+
    "\22\21\25\0\2\21\2\0\4\21\3\0\20\21\1\117"+
    "\5\21\25\0\2\21\2\0\4\21\3\0\4\21\1\120"+
    "\21\21\25\0\2\21\2\0\4\21\3\0\14\21\1\121"+
    "\11\21\25\0\2\21\2\0\4\21\3\0\5\21\1\73"+
    "\4\21\1\73\13\21\25\0\2\21\2\0\4\21\3\0"+
    "\10\21\1\122\15\21\25\0\2\21\2\0\4\21\3\0"+
    "\2\21\1\123\23\21\25\0\2\21\2\0\4\21\3\0"+
    "\14\21\1\124\11\21\25\0\2\21\2\0\4\21\3\0"+
    "\17\21\1\73\6\21\25\0\2\21\2\0\4\21\3\0"+
    "\15\21\1\125\10\21\25\0\2\21\2\0\4\21\3\0"+
    "\15\21\1\126\10\21\25\0\2\21\2\0\4\21\3\0"+
    "\16\21\1\127\7\21\25\0\2\21\2\0\4\21\3\0"+
    "\13\21\1\130\12\21\25\0\2\21\2\0\4\21\3\0"+
    "\14\21\1\131\4\21\1\77\4\21\25\0\2\21\2\0"+
    "\4\21\3\0\20\21\1\132\5\21\25\0\2\21\2\0"+
    "\4\21\3\0\10\21\1\133\15\21\25\0\2\21\2\0"+
    "\4\21\3\0\21\21\1\134\4\21\25\0\2\21\2\0"+
    "\4\21\3\0\25\21\1\73\25\0\2\21\2\0\4\21"+
    "\3\0\10\21\1\135\15\21\25\0\2\21\2\0\4\21"+
    "\3\0\21\21\1\136\4\21\25\0\2\21\2\0\4\21"+
    "\3\0\4\21\1\137\21\21\12\0\1\107\7\0\1\47"+
    "\102\0\1\140\32\0\15\141\1\0\50\141\6\0\1\142"+
    "\100\0\2\21\2\0\4\21\3\0\20\21\1\116\5\21"+
    "\25\0\2\21\2\0\4\21\3\0\4\21\1\73\21\21"+
    "\25\0\2\21\2\0\4\21\3\0\4\21\1\143\21\21"+
    "\25\0\2\21\2\0\4\21\3\0\4\21\1\144\21\21"+
    "\25\0\2\21\2\0\4\21\3\0\1\145\25\21\25\0"+
    "\2\21\2\0\4\21\3\0\21\21\1\146\4\21\25\0"+
    "\2\21\2\0\4\21\3\0\5\21\1\147\20\21\25\0"+
    "\2\21\2\0\4\21\3\0\4\21\1\150\21\21\25\0"+
    "\2\21\2\0\4\21\3\0\1\151\25\21\25\0\2\21"+
    "\2\0\4\21\3\0\13\21\1\73\12\21\25\0\2\21"+
    "\2\0\4\21\3\0\1\21\1\152\24\21\25\0\2\21"+
    "\2\0\4\21\3\0\15\21\1\144\10\21\25\0\2\21"+
    "\2\0\4\21\3\0\1\21\1\153\24\21\25\0\2\21"+
    "\2\0\4\21\3\0\12\21\1\154\13\21\25\0\2\21"+
    "\2\0\4\21\3\0\20\21\1\73\5\21\25\0\2\21"+
    "\2\0\4\21\3\0\20\21\1\115\5\21\25\0\2\21"+
    "\2\0\4\21\3\0\22\21\1\155\3\21\25\0\2\21"+
    "\2\0\4\21\3\0\12\21\1\115\13\21\25\0\2\21"+
    "\2\0\4\21\3\0\7\21\1\73\16\21\25\0\2\21"+
    "\2\0\4\21\3\0\12\21\1\156\13\21\21\0\1\157"+
    "\50\0\6\141\1\160\57\141\21\0\2\21\2\0\4\21"+
    "\3\0\17\21\1\161\6\21\25\0\2\21\2\0\4\21"+
    "\3\0\11\21\1\73\14\21\25\0\2\21\2\0\4\21"+
    "\3\0\10\21\1\162\15\21\25\0\2\21\2\0\4\21"+
    "\3\0\4\21\1\163\21\21\25\0\2\21\2\0\4\21"+
    "\3\0\16\21\1\161\7\21\25\0\2\21\2\0\4\21"+
    "\3\0\12\21\1\164\13\21\25\0\2\21\2\0\4\21"+
    "\3\0\1\165\25\21\25\0\2\21\2\0\4\21\3\0"+
    "\3\21\1\166\22\21\25\0\2\21\2\0\4\21\3\0"+
    "\15\21\1\167\10\21\25\0\2\21\2\0\4\21\3\0"+
    "\17\21\1\170\6\21\25\0\2\21\2\0\4\21\3\0"+
    "\3\21\1\73\22\21\36\0\1\171\41\0\1\172\100\0"+
    "\2\21\2\0\4\21\3\0\21\21\1\73\4\21\25\0"+
    "\2\21\2\0\4\21\3\0\14\21\1\173\11\21\25\0"+
    "\2\21\2\0\4\21\3\0\12\21\1\133\13\21\25\0"+
    "\2\21\2\0\4\21\3\0\12\21\1\103\13\21\25\0"+
    "\2\21\2\0\4\21\3\0\12\21\1\73\13\21\25\0"+
    "\2\21\2\0\4\21\3\0\1\73\25\21\25\0\2\21"+
    "\2\0\4\21\3\0\2\21\1\152\23\21\25\0\2\21"+
    "\2\0\4\21\3\0\14\21\1\73\11\21\12\0\1\174"+
    "\141\0\1\175\24\0\2\21\2\0\4\21\3\0\22\21"+
    "\1\115\3\21\67\0\1\112\10\0\1\176\65\0\1\177"+
    "\74\0\1\200\56\0\1\201\6\0\1\200\63\0\1\112"+
    "\52\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6318];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\6\1\1\11\32\1\3\0\1\11\1\1"+
    "\1\11\2\0\32\1\4\0\25\1\2\0\1\11\14\1"+
    "\2\0\10\1\2\0\1\1\6\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column) {
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR", yyline, yycolumn);
            }
          // fall through
          case 12: break;
          case 2:
            { /*Ignore*/
            }
          // fall through
          case 13: break;
          case 3:
            { return token(yytext(), "ARITMÉTICO", yyline, yycolumn);
            }
          // fall through
          case 14: break;
          case 4:
            { return token(yytext(), "OTROS", yyline, yycolumn);
            }
          // fall through
          case 15: break;
          case 5:
            { return token(yytext(), "CONSTANTES", yyline, yycolumn);
            }
          // fall through
          case 16: break;
          case 6:
            { return token(yytext(), "COMPARACIÓN", yyline, yycolumn);
            }
          // fall through
          case 17: break;
          case 7:
            { return token(yytext(), "ASIGNACIÓN", yyline, yycolumn);
            }
          // fall through
          case 18: break;
          case 8:
            { return token(yytext(), "IDENTIFICADORES", yyline, yycolumn);
            }
          // fall through
          case 19: break;
          case 9:
            { return token(yytext(), "IDENTIFICADOR", yyline, yycolumn);
            }
          // fall through
          case 20: break;
          case 10:
            { return token(yytext(), "PALABRAS CLAVE", yyline, yycolumn);
            }
          // fall through
          case 21: break;
          case 11:
            { return token(yytext(), "LÓGICOS", yyline, yycolumn);
            }
          // fall through
          case 22: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
